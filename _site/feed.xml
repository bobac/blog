<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-11-17T19:42:44+01:00</updated><id>/feed.xml</id><entry><title type="html">Navidrome - self hosted music streaming</title><link href="/2021/11/17/Navidrome-self-hosted-music-streaming.html" rel="alternate" type="text/html" title="Navidrome - self hosted music streaming" /><published>2021-11-17T00:00:00+01:00</published><updated>2021-11-17T00:00:00+01:00</updated><id>/2021/11/17/Navidrome-self-hosted-music-streaming</id><content type="html" xml:base="/2021/11/17/Navidrome-self-hosted-music-streaming.html">&lt;p&gt;V minulém &lt;a href=&quot;/2021/11/17/Tagy-na-mp3-z-cli.html&quot;&gt;blogu&lt;/a&gt; jsem psal o &lt;strong&gt;mid3v2&lt;/strong&gt; k editování MP3 Tagů z CLI. Potřeboval jsem si rozběhnout vlastní streamování MP3, které bude mimo iTunes. Jde o to, že mám pár audioknih, které jsem koupil u &lt;a href=&quot;https://kechlibar.net/obchod/&quot;&gt;Mariana Kechlibara&lt;/a&gt;, a které jsem potřeboval oddělit od iTunes. Důvod je poměrně jednoduchý - chci, abych měl rozposlouchanou knihu někde jinde než muziku, z toho prostého důvodu, že iTunes nemá žádné záložky, takže jakmile pustím nějakou hudbu, prd vím, kde jsem přestal poslouchat knížku :-)&lt;/p&gt;

&lt;h2 id=&quot;požadavky&quot;&gt;Požadavky&lt;/h2&gt;
&lt;p&gt;Celkem jednoduché:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Musí to běžet na některém z mých serverů, takže &lt;em&gt;Linux&lt;/em&gt;.&lt;/li&gt;
  &lt;li&gt;Potřebuji k tomu nějakého klienta pro iOS, kde to budu reálně poslouchat (i když je samozřejmě hezké, že si můžu pustit cokoliv odkudkoliv jen z browseru), ale není to můj hlavní use-case.&lt;/li&gt;
  &lt;li&gt;Bylo by hezký, kdyby to mělo hotový &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;, aby zprovoznění nesežralo příliš lidského sádla.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Moje řešení splňuje vše.&lt;/p&gt;

&lt;h2 id=&quot;instalace&quot;&gt;Instalace&lt;/h2&gt;
&lt;p&gt;Do nějakého adresáře uložte následující &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: &quot;3.3&quot;
services:
  navidrome:
    image: deluan/navidrome:latest
    restart: unless-stopped
    ports:
      - &quot;4533:4533&quot;
    environment:
      ND_SCANINTERVAL: 30m
      ND_LOGLEVEL: info
      ND_BASEURL: &quot;&quot;
    volumes:
      - &quot;./data:/data&quot;
      - &quot;/path/to/your/music/here:/music:ro&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/path/to/your/music/here&lt;/code&gt; je v mém případě na zfs svazku, který se jmenuje &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tank/audiobooks&lt;/code&gt;, což s sebou přineslo nepříjemný efekt, že kontejner nešlo spustit s obskurní chybovou hláškou, že nemůže vytvořit volume, které je read-only, či něco podobného. Strejda Gůgl mi řekl, že je to proto, že mám docker nainstalovaný (Ubuntu 20.04) pomocí &lt;strong&gt;snap&lt;/strong&gt; balíčků, až že se to pak u zfs stává. Řešením bylo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo snap remove docker&lt;/code&gt; a instalace pomocí &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt&lt;/code&gt;, návodů je plný internet. Nepříjemností je, že budete muset re-creatnout (buildnout/pullnout) všechny existující kontejnery, což znamenalo puoze čtvrthodinové zdržení. &lt;strong&gt;Miluju Docker!!!&lt;/strong&gt; Instalovat všechno postaru, to by mě jeblo.&lt;/p&gt;

&lt;h2 id=&quot;spuštění&quot;&gt;Spuštění&lt;/h2&gt;
&lt;p&gt;Easy: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt;. Pak se připojit na &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://ip_serveru:4533&lt;/code&gt;, vytvořit si uživatele a je to. Já jsem si ještě vyrobil site na reverzní proxy s HTTPS pomocí &lt;a href=&quot;/2021/11/05/reverzni-proxy-s-ntlm.html&quot;&gt;proxy-manageru&lt;/a&gt;, abych mohl na svůj &lt;strong&gt;Navidrome&lt;/strong&gt; zvenku.&lt;/p&gt;

&lt;p&gt;Vypadá to takhle:
&lt;img src=&quot;/assets/images/navidrome.png&quot; alt=&quot;Screenshot z Navidrome&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;přístup-z-ios&quot;&gt;Přístup z iOS&lt;/h2&gt;
&lt;p&gt;Zatím jsem nainstaloval &lt;a href=&quot;https://apps.apple.com/us/app/substreamer/id1012991665&quot;&gt;substreamer&lt;/a&gt; a zdá se, že dělá přesně to, co chci. Stačí po instalci jen zadat url svého serveru, username a password a je to. Umí to i offline obsah a dokonce i bookmarky, takže je možné si explicitně uložit, kde jsem přestal. Super!&lt;/p&gt;

&lt;h2 id=&quot;credits&quot;&gt;Credits&lt;/h2&gt;
&lt;p&gt;Asi by nebylo fér nezmínit, kde jsem na &lt;strong&gt;Navidrome&lt;/strong&gt; přišel. Na skvělém Youtube kanálu &lt;a href=&quot;https://www.youtube.com/channel/UCwFpzG5MK5Shg_ncAhrgr9g&quot;&gt;Awsome Open Source&lt;/a&gt;, který provozuje &lt;strong&gt;Brian McGonagill&lt;/strong&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt; je i s chlupama sebraný z jeho &lt;a href=&quot;https://shownotes.opensourceisawesome.com/navidrome-music-streaming/&quot;&gt;shownotes&lt;/a&gt;, já jsem přidal jen, aby se po rebootu serveru zase pustil. Díky!&lt;/p&gt;</content><author><name>bobac</name></author><summary type="html">V minulém blogu jsem psal o mid3v2 k editování MP3 Tagů z CLI. Potřeboval jsem si rozběhnout vlastní streamování MP3, které bude mimo iTunes. Jde o to, že mám pár audioknih, které jsem koupil u Mariana Kechlibara, a které jsem potřeboval oddělit od iTunes. Důvod je poměrně jednoduchý - chci, abych měl rozposlouchanou knihu někde jinde než muziku, z toho prostého důvodu, že iTunes nemá žádné záložky, takže jakmile pustím nějakou hudbu, prd vím, kde jsem přestal poslouchat knížku :-)</summary></entry><entry><title type="html">Tagy na MP3 z CLI</title><link href="/2021/11/17/Tagy-na-mp3-z-cli.html" rel="alternate" type="text/html" title="Tagy na MP3 z CLI" /><published>2021-11-17T00:00:00+01:00</published><updated>2021-11-17T00:00:00+01:00</updated><id>/2021/11/17/Tagy-na-mp3-z-cli</id><content type="html" xml:base="/2021/11/17/Tagy-na-mp3-z-cli.html">&lt;p&gt;Před chvílí jsem zjitil, že potřebuji z command lajny na linuxovém serveru upravovat tagy pro MP3 soubory. Po chvíli googlení jsem přistál u &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mid3v2&lt;/code&gt;. Hlavní důvod je, že by měl podporovat &lt;strong&gt;utf-8&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;instalace&quot;&gt;Instalace&lt;/h2&gt;
&lt;p&gt;Potřebuje &lt;strong&gt;PIP&lt;/strong&gt;. Takže pokud &lt;strong&gt;PIP&lt;/strong&gt; ještě nemáte, nainstalujte jej:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo apt install pip
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Po instalaci &lt;strong&gt;PIP&lt;/strong&gt;u nainstalujte &lt;strong&gt;MUTAGEN&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo pip install mutagen
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;použití&quot;&gt;Použití&lt;/h2&gt;
&lt;p&gt;Ověřte, že &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mid3v2&lt;/code&gt; funguje:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# mid3v2
Usage: mid3v2 [OPTION] [FILE]...

Mutagen-based replacement for id3lib&apos;s id3v2.

Options:
  --version             show program&apos;s version number and exit
  -h, --help            show this help message and exit
  -v, --verbose         be verbose
  -q, --quiet           be quiet (the default)
  -e, --escape          enable interpretation of backslash escapes
  -f, --list-frames     Display all possible frames for ID3v2.3 / ID3v2.4
  --list-frames-v2.2    Display all possible frames for ID3v2.2
  -L, --list-genres     Lists all ID3v1 genres
  -l, --list            Lists the tag(s) on the open(s)
  --list-raw            Lists the tag(s) on the open(s) in Python format
  -d, --delete-v2       Deletes ID3v2 tags
  -s, --delete-v1       Deletes ID3v1 tags
  -D, --delete-all      Deletes ID3v1 and ID3v2 tags
  --delete-frames=FID1,FID2,...
                        Delete the given frames
  -C, --convert         Convert tags to ID3v2.4 (any editing will do this)
  -a &quot;ARTIST&quot;, --artist=&quot;ARTIST&quot;
                        Set the artist information
  -A &quot;ALBUM&quot;, --album=&quot;ALBUM&quot;
                        Set the album title information
  -t &quot;SONG&quot;, --song=&quot;SONG&quot;
                        Set the song title information
  -c &quot;DESCRIPTION&quot;:&quot;COMMENT&quot;:&quot;LANGUAGE&quot;, --comment=&quot;DESCRIPTION&quot;:&quot;COMMENT&quot;:&quot;LANGUAGE&quot;
                        Set the comment information
  -p &quot;FILENAME&quot;:&quot;DESCRIPTION&quot;:&quot;IMAGE-TYPE&quot;:&quot;MIME-TYPE&quot;, --picture=&quot;FILENAME&quot;:&quot;DESCRIPTION&quot;:&quot;IMAGE-TYPE&quot;:&quot;MIME-TYPE&quot;
                        Set the picture
  -g &quot;GENRE&quot;, --genre=&quot;GENRE&quot;
                        Set the genre or genre number
  -y YYYY[-MM-DD], --year=YYYY[-MM-DD], --date=YYYY[-MM-DD]
                        Set the year/date
  -T &quot;num/num&quot;, --track=&quot;num/num&quot;
                        Set the track number/(optional) total tracks
You can set the value for any ID3v2 frame by using &apos;--&apos; and then a frame ID.
For example:
        mid3v2 --TIT3 &quot;Monkey!&quot; file.mp3
would set the &quot;Subtitle/Description&quot; frame to &quot;Monkey!&quot;.

Any editing operation will cause the ID3 tag to be upgraded to ID3v2.4.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;příklady&quot;&gt;Příklady&lt;/h2&gt;
&lt;p&gt;Přečtení tagů ze souboru:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mid3v2 -l soubor.mp3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Změna čísla stopy určitého souboru (v mém případě tam byl nesmysl):&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mid3v2 --TRCK=5 05_soubor.mp3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Nastavení konzistentního jména alba pro všechny mp3 v adresáři (aby iTunes nebo třeba &lt;a href=&quot;https://www.navidrome.org/&quot;&gt;Navidrome&lt;/a&gt;) pro jedno album v adresáři nevyrobil tři samostatná alba, jenom kvůli překlepům/nekonzistencím v tagu:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mid3v2 --TALB=&quot;Jméno alba&quot; *.mp3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Třeba to někomu pomůže, já si to sem píšu hlavně proto, že za dav roky, až to budu zase potřebovat, tak nebudu vědět, co jsem použil a kde to leží :-)&lt;/p&gt;</content><author><name>bobac</name></author><summary type="html">Před chvílí jsem zjitil, že potřebuji z command lajny na linuxovém serveru upravovat tagy pro MP3 soubory. Po chvíli googlení jsem přistál u mid3v2. Hlavní důvod je, že by měl podporovat utf-8.</summary></entry><entry><title type="html">Reverzní proxy s NTLM</title><link href="/2021/11/05/reverzni-proxy-s-ntlm.html" rel="alternate" type="text/html" title="Reverzní proxy s NTLM" /><published>2021-11-05T00:00:00+01:00</published><updated>2021-11-05T00:00:00+01:00</updated><id>/2021/11/05/reverzni-proxy-s-ntlm</id><content type="html" xml:base="/2021/11/05/reverzni-proxy-s-ntlm.html">&lt;p&gt;Už před časem jsem narazil na to, že pokud potřebuju někde udělat reverzní proxy, která potřebuje podporu NTLM authentication, tak mám se svým NGINXem smůlu. NGINX totiž podporuje NTLM pouze v placené verzi. Nějakou dobu registruji existenci web serveru &lt;strong&gt;&lt;a href=&quot;https://caddyserver.com/&quot;&gt;Caddy&lt;/a&gt;&lt;/strong&gt;, ale zatím jsem si vždy vystačil s kombem &lt;a href=&quot;https://www.nginx.com/&quot;&gt;NGINX&lt;/a&gt; a geniálním, krásným, a vůbec po všech stránkách velmi povedeným &lt;a href=&quot;https://nginxproxymanager.com/&quot;&gt;Nginx Proxy Managerem&lt;/a&gt;. Důvod, proč jsem vždycky používal &lt;strong&gt;NGINX&lt;/strong&gt; (třeba namísto Apache) byl v tom, že mi styl konfigurace tak nějak šel lépe do ruky. Nějakou dobu jsem řešil &lt;strong&gt;Let’s Encrypt&lt;/strong&gt; certifikáty pomocí jejich skriptů a fungovalo to docela hezky, ale &lt;strong&gt;Nginx Proxy Manager&lt;/strong&gt; to ještě dost zjednodušil - prostě si zaškrtnete, že k danému webu chcete https, necháte jej &lt;em&gt;HTTP&lt;/em&gt; traffic automaticky forwardovat na &lt;em&gt;HTTPS&lt;/em&gt; a o víc se nemusíte starat. Běží to ve dvou kontejnerech, má to hezké klikací webové rozhraní a generujete konfiguráky pro &lt;strong&gt;NGINX&lt;/strong&gt; samo. A taky to samo obnovuje certifikáty. Nádhera! Vypadá to asi takhle:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/proxy-manager.png&quot; alt=&quot;Screenshot z Nginx Proxy Manageru&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Rozběhnout je to hračka - potřebujete soubor &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;, který může vypadat třeba takhle:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: &apos;3&apos;
services:
  app:
    image: &apos;jc21/nginx-proxy-manager:latest&apos;
    restart: unless-stopped
    ports:
      - &apos;80:80&apos;
      - &apos;81:81&apos;
      - &apos;443:443&apos;
    environment:
      DB_MYSQL_HOST: &quot;db&quot;
      DB_MYSQL_PORT: 3306
      DB_MYSQL_USER: &quot;npm&quot;
      DB_MYSQL_PASSWORD: &quot;npm&quot;
      DB_MYSQL_NAME: &quot;npm&quot;
    volumes:
      - ./data:/data
      - ./letsencrypt:/etc/letsencrypt
  db:
    image: &apos;jc21/mariadb-aria:latest&apos;
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: &apos;npm&apos;
      MYSQL_DATABASE: &apos;npm&apos;
      MYSQL_USER: &apos;npm&apos;
      MYSQL_PASSWORD: &apos;npm&apos;
    volumes:
      - ./data/mysql:/var/lib/mysql
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(Dá se to bez přemýšlení obšlehnout z webu projektu).
Kontejnery pustíte pomocí &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; a pak stačí jen klikat na &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;http://lokalni_ip:81&lt;/code&gt;. Prvotní uživatelské jméno je &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;admin@example.com&lt;/code&gt; a heslo je &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;changeme&lt;/code&gt;. Myslel sem si, že už to jednodušší být nemůže…&lt;/p&gt;

&lt;h2 id=&quot;seznamte-se-tohle-je-caddy&quot;&gt;Seznamte se, tohle je Caddy&lt;/h2&gt;
&lt;p&gt;Idea webového serveru &lt;strong&gt;Caddy&lt;/strong&gt; je následující: Všechno musí fungovat v defaultním nastavení tak nějak samo. &lt;strong&gt;Caddy&lt;/strong&gt; je &lt;em&gt;HTTPS&lt;/em&gt; first, tedy pokud &lt;em&gt;HTTPS&lt;/em&gt; explicitně nezakážete, pojede pod &lt;em&gt;HTTPS&lt;/em&gt; a sám si bude točit certifikáty. Konfigurák, který se jmenuje &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Caddyfile&lt;/code&gt;, pro reverzní proxy je až směšně jednoduchej:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;venkovni.server.cz {
  reverse_proxy https://192.168.1.1:443 {
    transport http_ntlm {
      tls_insecure_skip_verify
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Tohle samo vyrobí https://venkovni.server.cz, zařídí si to certifikáty a bude servírovat server na vnitřní https://192.168.1.1:443, který vyžaduje NTLM autentifikaci. V mém případě je vnitřní traffic podepsaný self-signed certifikátem, takže je třeba odstavec &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;{ tls_insecure_skip_verify }&lt;/code&gt;, kdybych měl vevnitř jen &lt;em&gt;http&lt;/em&gt;, není třeba ani to.&lt;/p&gt;

&lt;h3 id=&quot;instalace&quot;&gt;Instalace&lt;/h3&gt;
&lt;p&gt;Jediná drobná zrada je v tom, že si nemůžu jen tak vzít hotový &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; nebo &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;, protože podpora pro NTLM transport není ve standardní binárce zakompilovaná. Ale i tak je to easy - dalo mi to asi hodinku než jsem na to přišel, a to jenom proto, že před tou hodinkou byly moje znalosti o &lt;strong&gt;Caddym&lt;/strong&gt; následující:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Je to web server/reverzní proxy&lt;/li&gt;
  &lt;li&gt;Je to napsaný v Go&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;To druhý není pro náš případ vůbec podstatný, ale protože se v &lt;em&gt;Go&lt;/em&gt; komunitě už nějakou dobu pohybuju, díky tomu jsem se o &lt;strong&gt;Caddy&lt;/strong&gt; vůbec dozvěděl :-)&lt;/p&gt;

&lt;p&gt;Takže potřebujema dva soubory. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM caddy:2.4.5-builder AS builder

RUN xcaddy build \
    --with github.com/caddyserver/ntlm-transport

FROM caddy:2.4.5

COPY --from=builder /usr/bin/caddy /usr/bin/caddy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: &quot;3.7&quot;

services:
  caddy:
    build: .
    restart: unless-stopped
    ports:
      - &quot;8080:80&quot;
      - &quot;8443:443&quot;
    volumes:
      - $PWD/Caddyfile:/etc/caddy/Caddyfile
      - $PWD/site:/srv
      - $PWD/data:/data
      - $PWD/config:/config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Takže teď už stačí &lt;strong&gt;Caddy&lt;/strong&gt; zbuildit pomocí &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose build&lt;/code&gt;. Než ho pustíte, dejte si k těm dvěma souborům do adresáře ještě připravený &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Caddyfile&lt;/code&gt; (viz výše).&lt;/p&gt;

&lt;p&gt;Spustíte pomocí &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt;.
A je to.&lt;/p&gt;

&lt;h2 id=&quot;závěr&quot;&gt;Závěr&lt;/h2&gt;
&lt;p&gt;Nevím, jestli se zbavím svého &lt;strong&gt;NGINX&lt;/strong&gt;. Ale jenom kvůli tomu, že na něj existuje to krásný klikátko. &lt;strong&gt;Caddy&lt;/strong&gt; je totiž tak easy, že snad klikátko ani nepotřebuje. Ale pokud budu zase někdy potřebovat reverzní proxy s NTLM (v mém případě to bylo kvůli Windows Admin Center), určitě po Caddym sáhnu. A dost možná, že na něj přejdu úplně a klikátko oželím. Je to zatím nejjednodušší web server, jaký jsem kdy viděl.&lt;/p&gt;</content><author><name>bobac</name></author><summary type="html">Už před časem jsem narazil na to, že pokud potřebuju někde udělat reverzní proxy, která potřebuje podporu NTLM authentication, tak mám se svým NGINXem smůlu. NGINX totiž podporuje NTLM pouze v placené verzi. Nějakou dobu registruji existenci web serveru Caddy, ale zatím jsem si vždy vystačil s kombem NGINX a geniálním, krásným, a vůbec po všech stránkách velmi povedeným Nginx Proxy Managerem. Důvod, proč jsem vždycky používal NGINX (třeba namísto Apache) byl v tom, že mi styl konfigurace tak nějak šel lépe do ruky. Nějakou dobu jsem řešil Let’s Encrypt certifikáty pomocí jejich skriptů a fungovalo to docela hezky, ale Nginx Proxy Manager to ještě dost zjednodušil - prostě si zaškrtnete, že k danému webu chcete https, necháte jej HTTP traffic automaticky forwardovat na HTTPS a o víc se nemusíte starat. Běží to ve dvou kontejnerech, má to hezké klikací webové rozhraní a generujete konfiguráky pro NGINX samo. A taky to samo obnovuje certifikáty. Nádhera! Vypadá to asi takhle:</summary></entry><entry><title type="html">Jekyll</title><link href="/2021/10/31/jekyll.html" rel="alternate" type="text/html" title="Jekyll" /><published>2021-10-31T00:00:00+02:00</published><updated>2021-10-31T00:00:00+02:00</updated><id>/2021/10/31/jekyll</id><content type="html" xml:base="/2021/10/31/jekyll.html">&lt;p&gt;Tenhle blbník běží na &lt;a href=&quot;https://jekyllrb.com&quot;&gt;Jekyllu&lt;/a&gt;. Pohrávám si s myšlenkou, že to vůbec nebudu stylovat nechám to takhle hnusný. Čistej defaultní html layout jako z devadesátek, tesně před tím, než lidé přišli na to, že je možný přidělat nějkaý blikátka. Pamatujete si taky na ty hnusný animovaný GIFy?&lt;/p&gt;

&lt;p&gt;Přeci jen něco málo o tom, co Jekyll je - je to statický generátor webů. Což znamená, že na samotný hosting webu nepotřebujete nic. Žádný php, žádnou databázi, žádnej redakční systém. Celý obsah je jen něco málo html jako layout a pak už jen hromádka *.md souborů.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jekyll&lt;/strong&gt; umí samozřejmě vkládat obrázky:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/tux.png&quot; alt=&quot;Tux, maskot Linuxu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;…protože to umí &lt;a href=&quot;https://www.markdownguide.org/basic-syntax/&quot;&gt;Markdown&lt;/a&gt;. Idea Markdownu je, aby text, který v něm napíšete, šlo lidsky číst, i když do něj koukáte, jako do prostýho texťáku. Kdo se někdy snažil přečíst delší text v html bez prohlížeče, který by jej vyrenderoval ví, o čem mluvím.&lt;/p&gt;

&lt;p&gt;Markdown (MD) samozřejmě umí &lt;em&gt;Kurzívu&lt;/em&gt; nebo &lt;strong&gt;Tučný text&lt;/strong&gt;. Taky umí číslované i nečíslované seznamy:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;první položka
    &lt;ul&gt;
      &lt;li&gt;subpoložka a&lt;/li&gt;
      &lt;li&gt;subpoložka b&lt;/li&gt;
      &lt;li&gt;subpoložka c&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;druhá položka&lt;/li&gt;
  &lt;li&gt;třetí položka&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Jekyll&lt;/strong&gt; nedělá nic jiného, než drží kostru webu pohromadě, tedy z hromádky textových (pardon, MD) souborů ve struktuře asi jako:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;_posts
    2021-10-29-prvni-post.md
    2021-10-31-jekyll.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;vyrobí tenhle web v html.&lt;/p&gt;

&lt;p&gt;Původní text (zdroják, chcete-li) tohoto postu vypadá takhle:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: post
author: bobac
---
Tenhle blbník běží na [Jekyllu](https://jekyllrb.com). Pohrávám si s myšlenkou, že to vůbec nebudu stylovat nechám to takhle hnusný. Čistej defaultní html layout jako z devadesátek, tesně před tím, než lidé přišli na to, že je možný přidělat nějkaý blikátka. Pamatujete si taky na ty hnusný animovaný GIFy?

Přeci jen něco málo o tom, co Jekyll je - je to statický generátor webů. Což znamená, že na samotný hosting webu nepotřebujete nic. Žádný php, žádnou databázi, žádnej redakční systém. Celý obsah je jen něco málo html jako layout a pak už jen hromádka *.md souborů.

**Jekyll** umí samozřejmě vkládat obrázky:

![Tux, maskot Linuxu](/assets/images/tux.png)

...protože to umí [Markdown](https://www.markdownguide.org/basic-syntax/). Idea Markdownu je, aby text, který v něm napíšete, šlo lidsky číst, i když do něj koukáte, jako do prostýho texťáku. Kdo se někdy snažil přečíst delší text v html bez prohlížeče, který by jej vyrenderoval ví, o čem mluvím.

Markdown (MD) samozřejmě umí _Kurzívu_ nebo **Tučný text**. Taky umí číslované i nečíslované seznamy:

1. první položka
    - subpoložka a
    - subpoložka b
    - subpoložka c
2. druhá položka
3. třetí položka

**Jekyll** nedělá nic jiného, než drží kostru webu pohromadě, tedy z hromádky textových (pardon, MD) souborů ve struktuře asi jako:

    _posts
        2021-10-29-prvni-post.md
        2021-10-31-jekyll.md

vyrobí tenhle web v html.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>bobac</name></author><summary type="html">Tenhle blbník běží na Jekyllu. Pohrávám si s myšlenkou, že to vůbec nebudu stylovat nechám to takhle hnusný. Čistej defaultní html layout jako z devadesátek, tesně před tím, než lidé přišli na to, že je možný přidělat nějkaý blikátka. Pamatujete si taky na ty hnusný animovaný GIFy?</summary></entry></feed>